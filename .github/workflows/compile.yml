name: Compile the project

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'File version (e.g. 1.1.0.0)'
        required: true
      tagname:
        description: 'Tag name (e.g. 1.1.0.0-test)'
        required: true
      release_name:
        description: 'Release name'
        required: true

jobs:
  macOS:
    runs-on: macos-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          repository: SET19724/ESET-KeyGen-test
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug Directory Structure
        shell: bash
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Looking for Python files:"
          find . -name "*.py" -o -name "requirements.txt" | head -10
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        
      - name: Compile
        shell: bash
        run: |
          # Sprawdź czy jesteśmy w głównym katalogu repozytorium
          if [[ ! -f "main.py" ]] && [[ -d "ESET-KeyGen" ]]; then
            cd ESET-KeyGen
            echo "Moved to ESET-KeyGen directory"
          fi
          
          # Sprawdź czy main.py istnieje
          if [[ ! -f "main.py" ]]; then
            echo "Error: main.py not found in current directory: $(pwd)"
            find .. -name "main.py" | head -5
            exit 1
          fi
          
          python -m pip install --upgrade pip
          python -m pip install charset_normalizer pyinstaller -r requirements.txt
          pyinstaller --onefile --clean main.py
          chmod a+x ./dist/main
          mv ./dist/main "./ESET-KeyGen_v${{ github.event.inputs.version }}_macos"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: ./ESET-KeyGen_v${{ github.event.inputs.version }}_macos

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          repository: SET19724/ESET-KeyGen-test
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          Write-Host "Current directory: $(pwd)"
          Write-Host "Directory contents:"
          Get-ChildItem -Force
          Write-Host "Looking for Python files:"
          Get-ChildItem -Recurse -Name "main.py", "requirements.txt" | Select-Object -First 10

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare workspace and check files
        shell: pwsh
        run: |
          # Sprawdź strukturę i przejdź do właściwego katalogu
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
            Write-Host "Moved to ESET-KeyGen directory"
          }
          
          # Sprawdź czy main.py istnieje
          if (!(Test-Path "main.py")) {
            Write-Error "main.py not found in current directory: $(pwd)"
            Get-ChildItem -Recurse -Name "main.py" | Select-Object -First 5
            exit 1
          }
          
          # Sprawdź czy requirements.txt istnieje
          if (!(Test-Path "requirements.txt")) {
            Write-Error "requirements.txt not found in current directory: $(pwd)"
            Get-ChildItem -Recurse -Name "requirements.txt" | Select-Object -First 5
            exit 1
          }

      - name: Install dependencies
        shell: pwsh
        run: |
          # Przejdź do właściwego katalogu jeśli trzeba
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
          }
          
          pip install --upgrade pip
          pip install pyinstaller -r requirements.txt

      - name: Compile Windows executable (simplified)
        shell: pwsh
        run: |
          # Przejdź do właściwego katalogu jeśli trzeba
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
          }
          
          # Użyj prostszej konfiguracji PyInstaller bez problematycznych opcji
          try {
            Write-Host "Starting PyInstaller compilation..."
            pyinstaller --onefile --clean main.py
            
            # Sprawdź czy kompilacja się udała
            if (Test-Path ".\dist\main.exe") {
              # Utwórz dwie kopie - jedna jako win64, druga jako win32
              Copy-Item -Path .\dist\main.exe -Destination "..\ESET-KeyGen_v${{ github.event.inputs.version }}_win64.exe"
              Copy-Item -Path .\dist\main.exe -Destination "..\ESET-KeyGen_v${{ github.event.inputs.version }}_win32.exe"
              Write-Host "Successfully compiled Windows version"
              Write-Host "File size: $([math]::Round((Get-Item .\dist\main.exe).Length/1MB, 2)) MB"
            } else {
              Write-Error "Compilation failed - main.exe not found in dist folder"
              Write-Host "Contents of dist folder:"
              if (Test-Path ".\dist") {
                Get-ChildItem -Recurse .\dist
              } else {
                Write-Host "Dist folder does not exist"
              }
              exit 1
            }
          }
          catch {
            Write-Error "PyInstaller compilation failed: $($_.Exception.Message)"
            Write-Host "Full error details:"
            Write-Host $_.Exception
            exit 1
          }

      - name: Verify compiled files exist
        shell: pwsh
        run: |
          Write-Host "Checking compiled files:"
          $files = Get-ChildItem -Name "ESET-KeyGen_v${{ github.event.inputs.version }}_*.exe" -ErrorAction SilentlyContinue
          if ($files) {
            foreach ($file in $files) {
              $size = [math]::Round((Get-Item $file).Length/1MB, 2)
              Write-Host "$file : $size MB"
            }
          } else {
            Write-Error "No compiled files found!"
            Write-Host "All files in current directory:"
            Get-ChildItem
            exit 1
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if previous steps had warnings
        with:
          name: windows-artifacts
          path: |
            ESET-KeyGen_v${{ github.event.inputs.version }}_win32.exe
            ESET-KeyGen_v${{ github.event.inputs.version }}_win64.exe
          if-no-files-found: error  # Fail if no files found

  release:
    needs: [macOS, windows]
    runs-on: ubuntu-latest
    if: always() && (needs.macOS.result == 'success' || needs.windows.result == 'success')
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        if: needs.macOS.result == 'success'
        with:
          name: macos-artifact
        continue-on-error: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        if: needs.windows.result == 'success'
        with:
          name: windows-artifacts
        continue-on-error: true

      - name: List available files
        run: |
          echo "Available files for release:"
          ls -la
          find . -name "ESET-KeyGen_v*" -type f

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.release_name }}
          tag_name: v${{ github.event.inputs.tagname }}
          draft: false
          generate_release_notes: true
          files: |
            ESET-KeyGen_v${{ github.event.inputs.version }}_*
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
