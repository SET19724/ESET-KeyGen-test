name: Compile the project

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'File version (e.g. 1.1.0.0)'
        required: true
      tagname:
        description: 'Tag name (e.g. 1.1.0.0-test)'
        required: true
      release_name:
        description: 'Release name'
        required: true

jobs:
  macOS:
    runs-on: macos-latest
    outputs:
      artifact_mac: ${{ steps.upload.outputs.artifact_mac }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          repository: SET19724/ESET-KeyGen-test
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug Directory Structure
        shell: bash
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Looking for Python files:"
          find . -name "*.py" -o -name "requirements.txt" | head -10
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        
      - name: Compile
        shell: bash
        run: |
          # Sprawdź czy jesteśmy w głównym katalogu repozytorium
          if [[ ! -f "main.py" ]] && [[ -d "ESET-KeyGen" ]]; then
            cd ESET-KeyGen
            echo "Moved to ESET-KeyGen directory"
          fi
          
          # Sprawdź czy main.py istnieje
          if [[ ! -f "main.py" ]]; then
            echo "Error: main.py not found in current directory: $(pwd)"
            find .. -name "main.py" | head -5
            exit 1
          fi
          
          python -m pip install --upgrade pip
          python -m pip install charset_normalizer pyinstaller -r requirements.txt
          pyinstaller --onefile --clean --target-arch universal2 main.py
          chmod a+x ./dist/main
          mv ./dist/main "./ESET-KeyGen_v${{ github.event.inputs.version }}_macos"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: ./ESET-KeyGen_v${{ github.event.inputs.version }}_macos

  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
        with:
          repository: SET19724/ESET-KeyGen-test
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          Write-Host "Current directory: $(pwd)"
          Write-Host "Directory contents:"
          Get-ChildItem -Force
          Write-Host "Looking for Python files:"
          Get-ChildItem -Recurse -Name "main.py", "requirements.txt" | Select-Object -First 10

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download DLL patch
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/nalexandru/api-ms-win-core-path-HACK/releases/download/0.3.1/api-ms-win-core-path-blender-0.3.1.zip" -OutFile dlls.zip
          Expand-Archive -Path dlls.zip -DestinationPath dll_patch
          
          # Sprawdź strukturę plików DLL
          Write-Host "DLL patch structure:"
          Get-ChildItem -Recurse dll_patch | Select-Object FullName

      - name: Prepare workspace and check files
        shell: pwsh
        run: |
          # Sprawdź strukturę i przejdź do właściwego katalogu
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
            Write-Host "Moved to ESET-KeyGen directory"
          }
          
          # Sprawdź czy main.py istnieje
          if (!(Test-Path "main.py")) {
            Write-Error "main.py not found in current directory: $(pwd)"
            Get-ChildItem -Recurse -Name "main.py" | Select-Object -First 5
            exit 1
          }
          
          # Sprawdź czy requirements.txt istnieje
          if (!(Test-Path "requirements.txt")) {
            Write-Error "requirements.txt not found in current directory: $(pwd)"
            Get-ChildItem -Recurse -Name "requirements.txt" | Select-Object -First 5
            exit 1
          }

      - name: Compile win64 (primary)
        shell: pwsh
        run: |
          # Przejdź do właściwego katalogu jeśli trzeba
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
          }
          
          pip install --upgrade pip
          pip install pyinstaller -r requirements.txt
          
          # Sprawdź ścieżkę do DLL - popraw ścieżkę względną
          $dllPath = "..\dll_patch\api-ms-win-core-path-blender\x64\api-ms-win-core-path-l1-1-0.dll"
          if (Test-Path $dllPath) {
            Write-Host "Found DLL at: $dllPath"
            # Używaj ; jako separator na Windows zgodnie z os.pathsep
            pyinstaller --onefile --collect-data selenium_stealth --add-data "$dllPath;." main.py
          } else {
            Write-Host "DLL not found at: $dllPath"
            Write-Host "Available DLL files:"
            Get-ChildItem -Recurse -Name "*.dll" ..\dll_patch | Select-Object -First 10
            # Kompiluj bez DLL jeśli nie znajdzie
            pyinstaller --onefile --collect-data selenium_stealth main.py
          }
          
          # Sprawdź czy kompilacja się udała
          if (Test-Path ".\dist\main.exe") {
            Move-Item -Path .\dist\main.exe -Destination "..\ESET-KeyGen_v${{ github.event.inputs.version }}_win64.exe"
            Write-Host "Successfully compiled win64 version"
          } else {
            Write-Error "Compilation failed - main.exe not found in dist folder"
            Get-ChildItem -Recurse .\dist | Select-Object FullName
            exit 1
          }

      - name: Compile win32 (simplified approach)
        shell: pwsh
        run: |
          # Przejdź do właściwego katalogu jeśli trzeba
          if (!(Test-Path "main.py") -and (Test-Path "ESET-KeyGen")) {
            Set-Location "ESET-KeyGen"
          }
          
          # Wyczyść poprzedni build
          if (Test-Path "build") { Remove-Item -Recurse -Force build }
          if (Test-Path "dist") { Remove-Item -Recurse -Force dist }
          if (Test-Path "main.spec") { Remove-Item -Force main.spec }
          
          # Sprawdź ścieżkę do DLL dla x86
          $dllPath32 = "..\dll_patch\api-ms-win-core-path-blender\x86\api-ms-win-core-path-l1-1-0.dll"
          if (Test-Path $dllPath32) {
            Write-Host "Found 32-bit DLL at: $dllPath32"
            # Kompiluj z DLL
            pyinstaller --onefile --collect-data selenium_stealth --add-data "$dllPath32;." main.py
          } else {
            Write-Host "32-bit DLL not found, compiling without it"
            pyinstaller --onefile --collect-data selenium_stealth main.py
          }
          
          # Sprawdź czy kompilacja się udała
          if (Test-Path ".\dist\main.exe") {
            Move-Item -Path .\dist\main.exe -Destination "..\ESET-KeyGen_v${{ github.event.inputs.version }}_win32.exe"
            Write-Host "Successfully compiled win32 version"
          } else {
            Write-Error "Win32 compilation failed - main.exe not found in dist folder"
            exit 1
          }

      - name: Verify compiled files
        shell: pwsh
        run: |
          Write-Host "Checking compiled files:"
          Get-ChildItem -Name "ESET-KeyGen_v${{ github.event.inputs.version }}_*.exe"
          
          # Sprawdź rozmiary plików
          Get-ChildItem "ESET-KeyGen_v${{ github.event.inputs.version }}_*.exe" | ForEach-Object {
            Write-Host "$($_.Name): $([math]::Round($_.Length/1MB, 2)) MB"
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            ESET-KeyGen_v${{ github.event.inputs.version }}_win32.exe
            ESET-KeyGen_v${{ github.event.inputs.version }}_win64.exe

  release:
    needs: [macOS, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-artifact

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.release_name }}
          tag_name: v${{ github.event.inputs.tagname }}
          draft: false
          generate_release_notes: true
          files: |
            ESET-KeyGen_v${{ github.event.inputs.version }}_macos
            ESET-KeyGen_v${{ github.event.inputs.version }}_win32.exe
            ESET-KeyGen_v${{ github.event.inputs.version }}_win64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
